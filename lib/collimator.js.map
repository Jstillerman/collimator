{"version":3,"sources":["collimator.js"],"names":[],"mappings":";;;;;qBA0BwB,UAAU;;;;wBA1Bb,UAAU;;;;qBACV,OAAO;;gCAEF,qBAAqB;;;;gCACrB,qBAAqB;;;;uCACrB,4BAA4B;;;;;;;;;;;;;;;;;;;;;;;;AAqBvC,SAAS,UAAU,CAAC,EAAE,EAAE;AACrC,MAAM,OAAO,GAAG,SAAV,OAAO,CAAG,KAAK;WAAI,sBAAS,KAAK,CAAC,kBAAM,KAAK,EAAE;AACnD,YAAM,EAAS,mCAAO,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC;AACrC,mBAAa,EAAE,0CAAc,EAAE,EAAE,KAAK,CAAC,IAAI,CAAC;KAC7C,CAAC,CAAC;GAAA,CAAC;;AAEJ,SAAO,mCAAO,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;CAChC;;QAEO,MAAM;QAAE,MAAM;QAAE,aAAa","file":"collimator.js","sourcesContent":["import bluebird from 'bluebird';\nimport {merge}  from 'ramda';\n\nimport tables        from './inspectors/tables';\nimport schema        from './inspectors/schema';\nimport relationships from './inspectors/relationships';\n\n/**\n * Inspect all enumerable table in a database, and return a promise that will\n * resolve to information about each table.\n *\n * The resolved value will be an array of objects, each containing the\n * following properties:\n *\n * - `name` - The name of the enumerated table\n * - `primaryKeys` - An array of column names containing primary keys\n * - `schema` - A JSON Schema v4 document that can be used to validated objects\n *   that are candidates for insertion into this table\n * - `relationships` - Relationship information, determined by foreign key\n *   contraints. See `collimator.relationships` for further information on the\n *   structure of this data.\n *\n * @function collimator\n * @param {Promise.<Database>} db - The pg-promise connection\n * @returns {Promise.<Object>} A promise that will resolve to the information for each table\n */\nexport default function collimator(db) {\n  const inspect = table => bluebird.props(merge(table, {\n    schema:        schema(db, table.name),\n    relationships: relationships(db, table.name)\n  }));\n\n  return tables(db).map(inspect);\n}\n\nexport {tables, schema, relationships};\n"],"sourceRoot":"/source/"}