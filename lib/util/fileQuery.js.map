{"version":3,"sources":["util/fileQuery.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;oBAEW,MAAM;;wBACN,UAAU;;kBACV,IAAI;;wBACJ,UAAU;;;;AAElC,IAAM,SAAS,GAAG,sCAAmB,CAAC;;AAEtC,SAAS,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE;AAC/C,MAAI,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;AAC7B,YAAU,GAAG,UAAU,IAAI,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;;AAEzD,SAAO,SAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAC5B,IAAI,CAAC,UAAA,KAAK;WAAI,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,UAAU,CAAC;GAAA,CAAC,CAAC;CACvD;;AAED,SAAS,WAAW,CAAC,IAAI,EAAE;AACzB,MAAI,KAAK,GAAG,4BAAU,CAAC;AACvB,MAAI,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACtB,SAAO,mBAAQ,MAAM,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;CAClD;;qBAEc,SAAS","file":"util/fileQuery.js","sourcesContent":["'use strict';\n\nimport {resolve}   from 'path';\nimport {promisify} from 'bluebird';\nimport {readFile}  from 'fs';\nimport callsite    from 'callsite';\n\nconst readFileP = promisify(readFile);\n\nfunction fileQuery(db, file, params, resultMask) {\n  var path = resolvePath(file);\n  resultMask = resultMask || global.queryResult.manyOrNone;\n\n  return readFileP(path, 'utf-8')\n    .then(query => db.query(query, params, resultMask));\n}\n\nfunction resolvePath(file) {\n  var stack = callsite();\n  var caller = stack[2];\n  return resolve(caller.getFileName(), '..', file);\n}\n\nexport default fileQuery;\n"],"sourceRoot":"/source/"}