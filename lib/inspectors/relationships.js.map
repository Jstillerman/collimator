{"version":3,"sources":["inspectors/relationships.js"],"names":[],"mappings":";;;;;;;;wBAAqB,UAAU;;;;6BACV,mBAAmB;;;;;;;;;;;;;;;;;;;;;;;;;AAuBxC,SAAS,aAAa,CAAC,EAAE,EAAE,IAAI,EAAE;AAC/B,MAAI,OAAO,GAAG;AACZ,aAAS,EAAE,gCAAM,EAAE,EAAE,+BAA+B,EAAE,EAAC,IAAI,EAAJ,IAAI,EAAC,CAAC;AAC7D,OAAG,EAAQ,gCAAM,EAAE,EAAE,yBAAyB,EAAE,EAAC,IAAI,EAAJ,IAAI,EAAC,CAAC;GACxD,CAAC;;AAEF,SAAO,sBAAS,KAAK,CAAC,OAAO,CAAC,CAAC;CAChC;;qBAEc,aAAa","file":"inspectors/relationships.js","sourcesContent":["import bluebird from 'bluebird';\nimport query    from '../util/fileQuery';\n\n/**\n * Inspects the foreign key constraints definted in the table specified by\n * `name`, and returns a promise that will resolve to relationship information\n * about that table.\n *\n * This relationship information consists of `has` and `belongsTo` arrays. Each\n * element is an object with the following properties:\n *\n * `name` - The name of the related table\n *\n * `from` - The name of the linking field in the table being enumerated (ie,\n *          this table's foreign key)\n *\n * `to`   - The name of the linking field in the related table (ie, that\n *          table's primary key)\n *\n * @function collimator.relationships\n * @param {Promise.<Database>} db - The pg-promise connection\n * @param {String} name - The name of the table to get the relationship definitions for\n * @returns {Promise.<Object>} A promise that will resolve to the relationship definitions for the given table\n */\nfunction relationships(db, name) {\n  var queries = {\n    belongsTo: query(db, './relationships/belongsTo.sql', {name}),\n    has:       query(db, './relationships/has.sql', {name})\n  };\n\n  return bluebird.props(queries);\n}\n\nexport default relationships;\n"],"sourceRoot":"/source/"}